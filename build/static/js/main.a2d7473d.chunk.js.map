{"version":3,"sources":["api/index.js","components/ContactForm.js","components/Title.js","components/RenderContacts.js","components/Search.js","index.js"],"names":["fetchAPI","url","a","method","sendData","fetchOptions","headers","Authorization","body","JSON","stringify","fetch","response","json","data","ContactForm","props","addNewContact","activeContact","setActiveContact","replaceContact","useState","address","setAddress","name","setName","phoneNumber","setPhoneNumber","email","setEmail","contactType","type","setType","clearForm","useEffect","className","onSubmit","event","preventDefault","contactData","id","result","console","log","contact","newContact","error","placeholder","value","onChange","target","onClick","Title","ContactNoteForm","content","setContent","setContactList","then","contacts","RenderContacts","contactList","alphaOrder","filterTerm","filter","toLowerCase","includes","map","index","key","style","border","comments","comment","Search","setFilterTerm","App","sort","b","fa","fb","catch","oldContact","newContacts","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a2d7473d.chunk.js","sourcesContent":["export const fetchAPI = async (url, method = \"GET\", sendData = null) => {\r\n  const fetchOptions = {\r\n    method: method,\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      Authorization:\r\n        \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImRlY2hhIiwiaWF0IjoxNjA2MjYyNTA5LCJleHAiOjE2MTE0NDY1MDl9.Us4U9cMiyho5h7kYvelQx9v5VdharuQZR5lN7LOt4pQ\",\r\n    },\r\n  };\r\n\r\n  if (sendData) {\r\n    fetchOptions.body = JSON.stringify(sendData);\r\n  }\r\n\r\n  const response = await fetch(url, fetchOptions);\r\n  const data = await response.json();\r\n\r\n  return data;\r\n};\r\n//Below is an example of this fetch\r\n// fetchAPI(\"https://univ-contact-book.herokuapp.com/api/contacts\")\r\n//   .then(function (data) {\r\n//     console.log('my contacts', data);\r\n//   })\r\n//   .catch(function (error) {\r\n//     console.error('error fetching contacts', error);\r\n//   })\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\nimport { fetchAPI } from \"../api\";\r\n\r\nconst ContactForm = (props) => {\r\n  const {\r\n    addNewContact,\r\n    activeContact,\r\n    setActiveContact,\r\n    replaceContact,\r\n  } = props;\r\n\r\n  const [address, setAddress] = useState(activeContact.address);\r\n  const [name, setName] = useState(activeContact.name);\r\n  const [phoneNumber, setPhoneNumber] = useState(activeContact.phoneNumber);\r\n  const [email, setEmail] = useState(activeContact.email);\r\n  const [type, setType] = useState(activeContact.contactType);\r\n\r\n  function clearForm() {\r\n    setName(\"\");\r\n    setAddress(\"\");\r\n    setEmail(\"\");\r\n    setPhoneNumber(\"\");\r\n    setType(\"personal\");\r\n  }\r\n\r\n  useEffect(() => {\r\n    setAddress(activeContact.address || \"\");\r\n    setName(activeContact.name || \"\");\r\n    setPhoneNumber(activeContact.phoneNumber || \"\");\r\n    setEmail(activeContact.email || \"\");\r\n    setType(activeContact.contactType || \"personal\");\r\n  }, [activeContact]);\r\n\r\n  return (\r\n    <form\r\n      className=\"contactForm\"\r\n      onSubmit={async (event) => {\r\n        event.preventDefault();\r\n\r\n        const contactData = {\r\n          name: name,\r\n          address: address,\r\n          phoneNumber: phoneNumber,\r\n          email: email,\r\n          contactType: type,\r\n        };\r\n\r\n        if (activeContact.id) {\r\n          const result = await fetchAPI(\r\n            `https://univ-contact-book.herokuapp.com/api/contacts/${activeContact.id}`,\r\n            \"PATCH\",\r\n            contactData\r\n          );\r\n          console.log(result);\r\n          replaceContact(activeContact, result.contact);\r\n          clearForm();\r\n          setActiveContact({});\r\n        } else\r\n          try {\r\n            const newContact = await fetchAPI(\r\n              \"https://univ-contact-book.herokuapp.com/api/contacts\",\r\n              \"POST\",\r\n              contactData\r\n            );\r\n            addNewContact(newContact.contact);\r\n            clearForm();\r\n          } catch (error) {\r\n            console.error(error);\r\n          }\r\n      }}\r\n    >\r\n      {activeContact.id ? (\r\n        <h3>Edit Contact Info </h3>\r\n      ) : (\r\n        <h3>Create New Contact</h3>\r\n      )}\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Enter Contact Name\"\r\n        value={name}\r\n        onChange={(event) => setName(event.target.value)}\r\n      />\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Enter Contact Address\"\r\n        value={address}\r\n        onChange={(event) => setAddress(event.target.value)}\r\n      />\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Enter Contact Email\"\r\n        value={email}\r\n        onChange={(event) => setEmail(event.target.value)}\r\n      />\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Enter Contact Phone Number\"\r\n        value={phoneNumber}\r\n        onChange={(event) => setPhoneNumber(event.target.value)}\r\n      />\r\n      <select\r\n        name=\"contactType\"\r\n        id=\"contactType\"\r\n        value={type}\r\n        onChange={(event) => setType(event.target.value)}\r\n      >\r\n        <option value=\"work\">Work</option>\r\n        <option value=\"personal\">Personal</option>\r\n        <option value=\"other\">Other</option>\r\n      </select>\r\n      {activeContact.id ? (\r\n        <>\r\n          <button>Submit Edits</button>\r\n          <button\r\n            onClick={(event) => {\r\n              event.preventDefault();\r\n              setActiveContact({});\r\n              clearForm();\r\n            }}\r\n          >\r\n            Cancel\r\n          </button>\r\n        </>\r\n      ) : (\r\n        <button>ADD CONTACT</button>\r\n      )}\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default ContactForm;\r\n","import React from \"react\";\r\n\r\nconst Title = () => {\r\n  return (\r\n    <header id=\"title\" className=\"header\">\r\n      <h1 className=\"pageName\">deCha's Little Black Book</h1>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Title;\r\n","import React, { useState } from \"react\";\r\n\r\nimport { fetchAPI } from \"../api\";\r\n\r\nconst ContactNoteForm = (props) => {\r\n  const [content, setContent] = useState(\"\");\r\n  const { contact, setContactList } = props;\r\n\r\n  return (\r\n    <form className=\"notes-container\">\r\n      <input\r\n        type=\"text\"\r\n        className=\"notesInput\"\r\n        placeholder=\" enter note here then click 'Add Note'\"\r\n        value={content}\r\n        onChange={(event) => {\r\n          setContent(event.target.value);\r\n        }}\r\n      ></input>\r\n      <button\r\n        className=\"notesButton\"\r\n        onClick={async (event) => {\r\n          event.preventDefault();\r\n          fetchAPI(\r\n            `https://univ-contact-book.herokuapp.com/api/contacts/${contact.id}/comments`,\r\n            \"POST\",\r\n            {\r\n              content: `${content}`,\r\n            }\r\n          )\r\n            .then(() => {\r\n              return fetchAPI(\r\n                \"https://univ-contact-book.herokuapp.com/api/contacts\"\r\n              );\r\n            })\r\n            .then((data) => {\r\n              const { contacts } = data;\r\n              setContactList(contacts);\r\n              setContent(\"\");\r\n            });\r\n        }}\r\n      >\r\n        Add Note\r\n      </button>{\" \"}\r\n    </form>\r\n  );\r\n};\r\n\r\nconst RenderContacts = (props) => {\r\n  const {\r\n    contactList,\r\n    setContactList,\r\n    setActiveContact,\r\n    alphaOrder,\r\n    filterTerm,\r\n  } = props;\r\n\r\n  return (\r\n    <div className=\"contacts\">\r\n      {alphaOrder(contactList)}\r\n      {contactList\r\n        .filter(function (contact) {\r\n          return contact.name.toLowerCase().includes(filterTerm.toLowerCase());\r\n        })\r\n        .map((contact, index) => {\r\n          return (\r\n            <div\r\n              className=\"contact\"\r\n              key={index}\r\n              style={{ border: \"1px solid black\" }}\r\n            >\r\n              <h3 id=\"contactName\" className=\"contactInfo\">\r\n                {contact.name} ({contact.contactType})\r\n              </h3>\r\n              <p className=\"contactInfo\">Phone: {contact.phoneNumber}</p>\r\n              <p className=\"contactInfo\">Address: {contact.address}</p>\r\n              <p className=\"contactInfo\">Email: {contact.email}</p>\r\n              <div className=\"contactNotes\">\r\n                <ContactNoteForm\r\n                  contact={contact}\r\n                  setContactList={setContactList}\r\n                  contactList={contactList}\r\n                />\r\n\r\n                <h4>Notes about {contact.name}:</h4>\r\n                {contact.comments.map((comment, index) => {\r\n                  return (\r\n                    <>\r\n                      <p className=\"notes\">{comment.content}</p>\r\n                      <span>\r\n                        <button\r\n                          className=\"deleteNote\"\r\n                          key={index}\r\n                          onClick={async () => {\r\n                            await fetchAPI(\r\n                              `https://univ-contact-book.herokuapp.com/api/comments/${comment.id}`,\r\n                              \"DELETE\"\r\n                            );\r\n                            const data = await fetchAPI(\r\n                              \"https://univ-contact-book.herokuapp.com/api/contacts\"\r\n                            );\r\n                            const { contacts } = data;\r\n                            setContactList(contacts);\r\n                            alphaOrder(contactList);\r\n                          }}\r\n                        >\r\n                          Delete Note\r\n                        </button>{\" \"}\r\n                      </span>\r\n                    </>\r\n                  );\r\n                })}\r\n              </div>\r\n              <button\r\n                className=\"editContact\"\r\n                onClick={() => {\r\n                  setActiveContact(contact);\r\n                  console.log(contactList);\r\n                }}\r\n              >\r\n                Change Contact Info\r\n              </button>\r\n              <button\r\n                className=\"deleteContact\"\r\n                onClick={async () => {\r\n                  fetchAPI(\r\n                    `https://univ-contact-book.herokuapp.com/api/contacts/${contact.id}`,\r\n                    \"DELETE\",\r\n                    { name: contact.name, contactType: contact.contactType }\r\n                  )\r\n                    .then(() => {\r\n                      return fetchAPI(\r\n                        \"https://univ-contact-book.herokuapp.com/api/contacts\"\r\n                      );\r\n                    })\r\n                    .then((data) => {\r\n                      const { contacts } = data;\r\n                      setContactList(contacts);\r\n                    });\r\n                }}\r\n              >\r\n                Rid this Person From Your Life\r\n              </button>\r\n            </div>\r\n          );\r\n        })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RenderContacts;\r\n","import React from \"react\";\r\n\r\nconst Search = (props) => {\r\n  const { filterTerm, setFilterTerm } = props;\r\n\r\n  return (\r\n    <form\r\n      id=\"search\"\r\n      className=\"search\"\r\n      onSubmit={(event) => {\r\n        event.preventDefault();\r\n      }}\r\n    >\r\n      <input\r\n        id=\"keywords\"\r\n        type=\"text\"\r\n        placeholder=\"Enter Contact Name for Search\"\r\n        className=\"search\"\r\n        value={filterTerm}\r\n        onChange={(event) => {\r\n          setFilterTerm(event.target.value);\r\n        }}\r\n      />\r\n      <button onClick={() => setFilterTerm(\"\")}>RESET FILTER</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport { Title, RenderContacts, ContactForm, Search } from \"./components\";\r\n\r\nimport { fetchAPI } from \"./api\";\r\n\r\nconst App = () => {\r\n  const [contactList, setContactList] = useState([]);\r\n  const [activeContact, setActiveContact] = useState({});\r\n  const [filterTerm, setFilterTerm] = useState(\"\");\r\n\r\n  function alphaOrder(contactList) {\r\n    contactList.sort((a, b) => {\r\n      let fa = a.name.toLowerCase();\r\n      let fb = b.name.toLowerCase();\r\n\r\n      if (fa < fb) {\r\n        return -1;\r\n      }\r\n\r\n      if (fa > fb) {\r\n        return 1;\r\n      }\r\n\r\n      return 0;\r\n    });\r\n  }\r\n\r\n  function addNewContact(newContact) {\r\n    newContact.comments = newContact.comments || [];\r\n    setContactList([...contactList, newContact]);\r\n  }\r\n\r\n  function replaceContact(oldContact, newContact) {\r\n    let newContacts = contactList.map((contact) => {\r\n      if (contact === oldContact) {\r\n        return newContact;\r\n      }\r\n      return contact;\r\n    });\r\n    setContactList(newContacts);\r\n  }\r\n\r\n  useEffect(() => {\r\n    fetchAPI(\"https://univ-contact-book.herokuapp.com/api/contacts\")\r\n      .then((data) => {\r\n        setContactList(data.contacts);\r\n        alphaOrder(contactList);\r\n      })\r\n      .catch(console.error);\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <Title />\r\n      <ContactForm\r\n        addNewContact={addNewContact}\r\n        replaceContact={replaceContact}\r\n        activeContact={activeContact}\r\n        setActiveContact={setActiveContact}\r\n      />\r\n      <Search filterTerm={filterTerm} setFilterTerm={setFilterTerm} />\r\n      <RenderContacts\r\n        addNewContact={addNewContact}\r\n        contactList={contactList}\r\n        setContactList={setContactList}\r\n        activeContact={activeContact}\r\n        setActiveContact={setActiveContact}\r\n        alphaOrder={alphaOrder}\r\n        filterTerm={filterTerm}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nReactDOM.render(<App />, document.getElementById(\"app\"));\r\n"],"sourceRoot":""}